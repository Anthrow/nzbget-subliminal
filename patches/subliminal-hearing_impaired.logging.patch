diff -Naur subliminal-0.7.4/subliminal/api.py subliminal-0.7.4.patched/subliminal/api.py
--- subliminal-0.7.4/subliminal/api.py	2014-11-29 19:55:04.000000000 -0500
+++ subliminal-0.7.4.patched/subliminal/api.py	2014-11-29 19:44:06.000000000 -0500
@@ -74,7 +74,10 @@
                     except:
                         logger.exception('Unexpected error in provider %r', provider_entry_point.name)
                         continue
-                    logger.info('Found %d subtitles', len(provider_subtitles))
+                    logger.info('Found %d subtitle(s) on %s' % (
+                        len(provider_subtitles),
+                        provider_entry_point.name,
+                    ))
                     subtitles[provider_video].extend(provider_subtitles)
         except ProviderNotAvailable:
             logger.warning('Provider %r is not available, discarding it', provider_entry_point.name)
@@ -207,10 +210,10 @@
             continue
         Provider = provider_entry_point.load()
         if not Provider.languages & languages - subtitle_languages:
-            logger.info('Skipping provider %r: no language to search for', provider_entry_point.name)
+            logger.debug('Skipping provider %r: no language to search for', provider_entry_point.name)
             continue
         if not [v for v in videos if Provider.check(v)]:
-            logger.info('Skipping provider %r: no video to search for', provider_entry_point.name)
+            logger.debug('Skipping provider %r: video type not hosted here.', provider_entry_point.name)
             continue
         provider = Provider(**provider_configs.get(provider_entry_point.name, {}))
         try:
@@ -253,27 +256,30 @@
                     except:
                         logger.exception('Unexpected error in provider %r', provider_name)
                         continue
-                    logger.info('Found %d subtitles', len(provider_subtitles))
+                    logger.info('Found %d subtitle(s) on %s' % (
+                        len(provider_subtitles),
+                        provider_name,
+                    ))
                     subtitles.extend(provider_subtitles)
 
             # find the best subtitles and download them
-            for subtitle, score in sorted([(s, s.compute_score(video)) for s in subtitles],
-                                          key=operator.itemgetter(1), reverse=True):
+            for subtitle, score in sorted([(s, s.compute_score(video, hi_score_adjust)) \
+                    for s in subtitles], key=operator.itemgetter(1), reverse=True):
+
                 # filter
                 if subtitle.provider_name in discarded_providers:
                     logger.debug('Skipping subtitle from discarded provider %r', subtitle.provider_name)
                     continue
+
                 if hearing_impaired is not None:
                     if subtitle.hearing_impaired != hearing_impaired:
                         logger.debug('Skipping subtitle: hearing impaired != %r', hearing_impaired)
                         continue
-                elif subtitle.hearing_impaired and hi_score_adjust != 0:
-                    # Priortization (adjust score)
-                    score += hi_score_adjust
 
                 if score < min_score:
                     logger.debug('Skipping subtitle: score < %d', min_score)
                     continue
+
                 if subtitle.language in downloaded_languages:
                     logger.debug('Skipping subtitle: %r already downloaded', subtitle.language)
                     continue
diff -Naur subliminal-0.7.4/subliminal/subtitle.py subliminal-0.7.4.patched/subliminal/subtitle.py
--- subliminal-0.7.4/subliminal/subtitle.py	2014-11-29 19:55:04.000000000 -0500
+++ subliminal-0.7.4.patched/subliminal/subtitle.py	2014-11-29 18:48:41.000000000 -0500
@@ -33,7 +33,7 @@
         """
         raise NotImplementedError
 
-    def compute_score(self, video):
+    def compute_score(self, video, hi_score_adjust=0):
         """Compute the score of the subtitle against the `video`
 
         There are equivalent matches so that a provider can match one element or its equivalent. This is
@@ -47,6 +47,7 @@
 
         :param video: the video to compute the score against
         :type video: :class:`~subliminal.video.Video`
+        :param hi_score_adjust: adjust hearing impaired matched videos by this value
         :return: score of the subtitle
         :rtype: int
 
@@ -69,7 +70,15 @@
                     matches -= set(['season', 'episode'])
             # add other scores
             score += sum([video.scores[match] for match in matches])
-        logger.info('Computed score %d with matches %r', score, initial_matches)
+
+            # Adjust scoring if hearing impaired subtitles are detected
+            if self.hearing_impaired and hi_score_adjust != 0:
+                logger.debug('Hearing impaired subtitle score adjusted ' + \
+                             'by %d' % hi_score_adjust)
+                # Priortization (adjust score)
+                score += hi_score_adjust
+
+        logger.debug('Computed score %d with matches %r', score, initial_matches)
         return score
 
     def __repr__(self):
diff -Naur subliminal-0.7.4/subliminal/video.py subliminal-0.7.4.patched/subliminal/video.py
--- subliminal-0.7.4/subliminal/video.py	2014-11-29 19:55:04.000000000 -0500
+++ subliminal-0.7.4.patched/subliminal/video.py	2014-11-29 19:34:28.000000000 -0500
@@ -71,6 +71,10 @@
     def __hash__(self):
         return hash(self.name)
 
+    def __eq__(self, other):
+        return self.__class__.__name__ == other.__class__.__name__\
+                and self.name == other.name
+
 
 class Episode(Video):
     """Episode :class:`Video`
@@ -112,6 +116,18 @@
     def __repr__(self):
         return '<%s [%r, %rx%r]>' % (self.__class__.__name__, self.series, self.season, self.episode)
 
+    def __hash__(self):
+        return hash((
+            self.series,
+            self.season,
+            self.episode,
+        ))
+
+    def __eq__(self, other):
+        return self.__class__.__name__ == other.__class__.__name__\
+                and self.series == other.series\
+                and self.season == other.season\
+                and self.episode == other.episode
 
 class Movie(Video):
     """Movie :class:`Video`
@@ -147,6 +163,18 @@
             return '<%s [%r]>' % (self.__class__.__name__, self.title)
         return '<%s [%r, %r]>' % (self.__class__.__name__, self.title, self.year)
 
+    def __hash__(self):
+        if self.year is None:
+            return hash((
+                self.title,
+                self.year,
+            ))
+        return hash(self.title)
+
+    def __eq__(self, other):
+        return self.__class__.__name__ == other.__class__.__name__\
+                and self.title == other.title\
+                and self.year == other.year
 
 def scan_subtitle_languages(path):
     """Search for subtitles with alpha2 extension from a video `path` and return their language
